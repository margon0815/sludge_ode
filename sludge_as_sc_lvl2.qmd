---
server: shiny
title: "Dynamischer Schlammhaushalt in einer Kläranlage"
---

```{r setup, include=FALSE}
library("shiny")
library("knitr")
library("jpeg")
library("deSolve")
library("Ecfun")


# conceptual model for dynamic system of activated sludge reactor and secondary 
# clarifier with variable sludge height based on Krebs et al., 2000

# Markus Ahnert, Dresden University of Technology, Institute for Urban Water Management
# markus.ahnert@tu-dresden.de

# Bild nur am Anfang einlesen, spart Rechenzeit
#image_complete <- readJPEG("www/as_sc_scheme_complete.jpg") 
image_simple1 <- readJPEG("www/as_sc_scheme_simple1.jpg")
image_simple1_normal <- readJPEG("www/as_sc_scheme_simple1_normal.jpg") 

t_start <- 0 # start time
t_end <- 5 # end time
t_points <- seq(t_start, t_end, by = 0.01) # time points for solution

# ode function
source("func_sludge_ode.R")


```


Markus Ahnert, Technische Universität Dresden, Institut für Siedlungs- und Industriewasserwirtschaft\
[markus.ahnert\@tu-dresden.de](mailto:markus.ahnert@tu-dresden.de)

###  Erläuterungen

Die nachfolgenden Erläuterungen bauen auf dem [statischen Schlammhaushalt in einer Kläranlage ](https://swwdigit.de/bb_nkb1/) auf. Dabei werden die gleichen Vereinfachungen hinsichtlich des gegenseitigen Aufhebens von 

-   Feststoffen im Zulauf
-   Biomassewachstum im Belebungsbecken
-   Abzug von Überschussschlamm und
-   Feststoffen im Ablauf im gereinigten Abwasser

angenommen. Daraus ergeben sich die Stoffströme wie in nachfolgender Abbildung.
  

```{r image_complete}
plotOutput("wwtp_complete")
```
  
  
Zusätzlich wird hier nun eine dynamische Zuflusserhöhung eingeführt. Die Zulaufmenge Q kann mit einem Faktor fQ erhöht werden. Dies erfolgt für 24 Stunden zwischen Tag 2 und 3 des 5tägigen Simulationszeitraums. Die Zuflusserhöhung sorgt für eine Schlammverlagerung zwischen Belebungs- und Nachklärbecken, die je nach eingestellten Parametern und Betriebsbedingungen unterschiedlich stark ausfällt. Nach Rückkehr zur Ausgangszulaufmenge dauert es je nach Einstellungen wieder einige Zeit, bis sich wieder die Werte auf einen statischen Zustand eingestellt haben.
Diese Schlammverlagerung ist besonders für die Prozesse der Nitrifikation interessant. Im Niederschlagsfall wird aus dem Kanalnetz eine vglw. große Sticktofffracht am Ereignisbeginn in die Kläranlage verlagert. Durch die gleichzeitige Verlagerung von Schlamm und der darin enthaltenen Biomasse kann sich so eine Situation einstellen, bei der es zu einer sprunghaften Erhöhung der Ablaufkonzentration an Ammonium kommt und somit die Gefahr einer Überschreitung des Überwachungswertes besteht. Daher ist die Schlammverlagerung in der Kläranlage möglichst gering zu halten, wobei eine direkte Beeinflussung durch den Kläranlagenbetrieb kaum möglich ist.
Gleichzeitig wird bei der Auslegung des Gesamtsystems aus Kanalnetz und Kläranlage angestrebt, einen möglichst großen Teil des anfallenden Niederschlagswassers in der Kläranlage mit zu behandeln, um die Gewässerbelastung über Mischwassereinleitungen zu minimieren.
  
  
  
### Übungsbeispiel

Im nachfolgenden Beispiel wird für das Belebungsbecken ein Volumen von 1000 m³ in der Berechnung angesetzt, für das Nachklärbecken eine Oberfläche von 150 m². Zusätzlich zu den Betriebseinstellungen aus der Berechnung des [statischen Schlammhaushalts in einer Kläranlage ](https://swwdigit.de/bb_nkb1/) kann die Zulaufmenge Q über den Faktor fQ erhöht werden.

#### Aufgaben

- Wie verändert sich qualitativ die Schlammspiegelhöhe im Nachklärbecken?
- Welcher Parameter hat den größten Einfluss auf die Schlammspiegelhöhe?
- Welcher Anteil an Belebschlamm befindet sich im steady state vor Zulauferhöhung bzw. nach Rückkehr zum Normaldurchfluss im Belebungsbecken und welcher befindet sich im Schlammbett des Nachklärbeckens?
- Wie lange dauert es bei den voreingestellten Parametern ungefähr, bis sich nach Zuflusserhöhung ein neues Gleichgewicht eingestellt hat?
- Wie ändert sich diese Einschwingzeit, wenn der ISV höher wird? Wie kann das erklärt werden?

  
  
  
```{r}

fluidPage(
fluidRow(
  column(width=6,
  # slider ----
  sliderInput("Q", "Zulaufmenge Q [m³/d]:",
                  min = 100, max = 20000,
                  value = 1000, step = 100)),
  column(width=6,
  # slider ----
  sliderInput("fQ", "Zulauferhöhung fQ [-]:",
                  min = 1, max = 10,
                  value = 2, step = 0.5))
  ),
fluidRow(
  column(width=6,
  # slider ----
  sliderInput("RV", "Rücklaufverhältnis RV [-]:",
                  min = 0.5, max = 1,
                  value = 1, step = 0.05)),
  column(width=6,
  # slider ----
  sliderInput("XBB", "TS-Gehalt Belebungsbecken TS_BB [g/L]:",
                  min = 1, max = 5,
                  value = 3, step = 0.1))
  ),
fluidRow(
  column(width=6,
  # slider ----
  sliderInput("ISV", "Schlammvolumenindex ISV [mL/kg]:",
                  min = 50, max = 200,
                  value = 100, step = 5))
  )
)

```

```{r image_simple1}
plotOutput("wwtp_simple1")
```

```{r annotate_wwtp_complete}
#| context: server
#
# zur Erklaerung was #|context:server bedeutet
# siehe https://quarto.org/docs/interactive/shiny/execution.html

output$wwtp_complete <- renderPlot({
  # plot ohne Inhalt aber mit bekannten Koordinaten
  par(mar=c(0,0,0,0))
  plot(NA, type="n", xlim=c(0,10), ylim=c(0,10), axes=FALSE, xlab="", ylab="")
  # die usr-Koordinaten sind die echten Koordinaten, inklusive Reserve, die
  # R automatisch hinzufuegt
  lim <- par("usr")

  # image auf volle Groesse des Plots als Hintergrundbild setzen
  rasterImageAdj(image_simple1_normal, xleft=lim[1], ybottom=lim[3], xright=lim[2], ytop=lim[4])

  # jetzt kann man beliebige Sachen irgendwo hinschreiben,
  # und zwar mit normalem R ohne html-Tricks
  box(lwd=1)
})
```

```{r annotate_wwtp_simple1}
#| context: server

ode_result <- reactive({

# get parameters from sliders, some are fixed  
params <- c(Q = input$Q, R=input$RV, V_BB=1000, A_NKB=150, DSVI=input$ISV )

# initial state
X_BB0 <- input$XBB # get it from slider

Ms_NKB0 <- unname((9e-7)*(input$XBB*input$ISV)^3.319)
state_0 <- c(X_BB=X_BB0, Ms_NKB = Ms_NKB0) # empirical estimation of start mass in SC

# function for dynamic inflow rate with constant values for steady state solution
fQ <- 1
influentdata <- data.frame(time = c(0, 2, 3, 100) ,
                           value = c(params["Q"], fQ*params["Q"], params["Q"], params["Q"]))
influentfun <- approxfun(influentdata, method="constant")

# solving ode system for steady state solution
out <- ode(y = state_0, times = t_points, func = sludge_ode, parms = params, influentfcn=influentfun)

# function for dynamic inflow rate with constant values for dynamic solution
fQ <- input$fQ
influentdata <- data.frame(time = c(0, 2, 3, 100) ,
                           value = c(params["Q"], fQ*params["Q"], params["Q"], params["Q"]))
influentfun <- approxfun(influentdata, method="constant")

# definition of new state
X_BB0 <- unname(out[nrow(out), 2])
Ms_NKB0 <- unname(out[nrow(out), 3])

state_0 <- c(X_BB=X_BB0, Ms_NKB = Ms_NKB0) 

# solving ode system for dynamic solution
out <- ode(y = state_0, times = t_points, func = sludge_ode, parms = params, influentfcn=influentfun)

})

output$wwtp_simple1 <- renderPlot({

  # Ergebnisse holen
  out <- ode_result()
  
  time <- out[,1]
  X_BB <- out[,2] 
  X_R <- out[,5]
  hs <- out[,6]
  MsBB <- out[,4]
  MsNKB <- out[,3]
  Qin <- out[,7]
  QX_BB <- Qin*(1+input$RV)*X_BB
  QX_R <- Qin*input$RV*X_R

# general preferences for the plot
par(mfrow = c(2, 2),
          mar = c(4,4,2,2)+0.1)    

std_ftsize <- 1.5 # standard font size
std_lwd <- 2 # standard line width

# plot sludge height
plot(x=time,y=hs,type="l",lwd=std_lwd,
     xlab = NA, ylab = "Höhe [m]", main = "Schlammspiegel im NKB",
     cex.main=std_ftsize,cex.sub=std_ftsize,cex.lab=std_ftsize,cex.axis=std_ftsize) 

# plot mass flux
plot(time, MsBB, type = "n", xlim = c(0, 5), ylim = c(min(QX_BB,QX_R), max(QX_BB,QX_R)),
     xlab = NA, ylab = "Feststofffluss [kg/h]", main = "Feststoffströme",
     cex.main=std_ftsize,cex.sub=std_ftsize,cex.lab=std_ftsize,cex.axis=std_ftsize) 

# Plot each line one by one
lines(time, QX_BB, type = "l", col = "black",lwd=std_lwd)
lines(time, QX_R, type = "l", col = "firebrick",lty=2,lwd=std_lwd)
# Add a legend
legend("right", legend = c("ins NKB", "ins BB"), 
       col = c("black", "firebrick"), lty = c(1,2), inset=0.01,cex=std_ftsize)

  
# plot solids conc
plot(time, X_BB, type = "n", xlim = c(0, 5), ylim = c(min(X_BB), max(X_R)),
     xlab = "Zeit [d]", ylab = "TS-Konzentration [g/L]", main = "Feststoffgehalte",
     cex.main=std_ftsize,cex.sub=std_ftsize,cex.lab=std_ftsize,cex.axis=std_ftsize) 

# Plot each line one by one
lines(time, X_BB, type = "l", col = "black",lwd=std_lwd)
lines(time, X_R, type = "l", col = "firebrick",lty=2,lwd=std_lwd)
# Add a legend
legend("right", legend = c("BB", "RLS"), 
       col = c("black", "firebrick"), lty = c(1,2), inset=0.01,cex=std_ftsize, ncol=2)


# plot mass content
plot(time, MsBB, type = "n", xlim = c(0, 5), ylim = c(min(MsBB,MsNKB), max(MsBB,MsNKB)),
     xlab = "Zeit [d]", ylab = "Feststoffmasse [kg]", main = "gespeicherte Massen",
     cex.main=std_ftsize,cex.sub=std_ftsize,cex.lab=std_ftsize,cex.axis=std_ftsize) 
   
# Plot each line one by one
lines(time, MsBB, type = "l", col = "black",lwd=std_lwd)
lines(time, MsNKB, type = "l", col = "firebrick",lty=2,lwd=std_lwd)
# Add a legend
legend("right", legend = c("BB", "NKB"), 
       col = c("black", "firebrick"), lty = c(1,2), inset=0.01,cex=std_ftsize)

# box(lwd=1) works only for single image

})
```
  
